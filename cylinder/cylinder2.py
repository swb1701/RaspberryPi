#NeoPixel Cylinder -- Scott Bennett 4/2019

import time
import board
import neopixel
import random

# Choose an open pin connected to the Data In of the NeoPixel strip, i.e. board.D18
# NeoPixels must be connected to D10, D12, D18 or D21 to work.
pixel_pin = board.D18

# The number of NeoPixels
num_pixels = 484
rows=11
cols=44

# The order of the pixel colors - RGB or GRB. Some NeoPixels have red and green reversed!
# For RGBW NeoPixels, simply change the ORDER to RGBW or GRBW.
ORDER = neopixel.GRB

pixels = neopixel.NeoPixel(pixel_pin, num_pixels, brightness=0.2, auto_write=False,
                           pixel_order=ORDER)

colors = [(255,0,0),(0,255,0),(0,0,255),(255,255,0),(0,255,255),(255,0,255),(255,255,255),(255,0,0),(0,255,0),(0,0,255),(255,255,0)]

font_data = [0x00, 0x00, 0x00, 0x00, 0x00, # ''
0x00, 0x00, 0x17, 0x00, 0x00, # '!'
0x00, 0x03, 0x00, 0x03, 0x00, # '"'
0x0a, 0x1f, 0x0a, 0x1f, 0x0a, # '#'
0x12, 0x15, 0x1f, 0x15, 0x09, # '$'
0x13, 0x0b, 0x04, 0x1a, 0x19, # '%'
0x0d, 0x12, 0x15, 0x08, 0x14, # '&'
0x00, 0x00, 0x03, 0x00, 0x00, # '''
0x00, 0x0e, 0x11, 0x00, 0x00, # '('
0x00, 0x00, 0x11, 0x0e, 0x00, # ')'
0x00, 0x05, 0x02, 0x05, 0x00, # '*'
0x04, 0x04, 0x1f, 0x04, 0x04, # '+'
0x00, 0x10, 0x08, 0x00, 0x00, # ','
0x04, 0x04, 0x04, 0x04, 0x04, # '-'
0x00, 0x18, 0x18, 0x00, 0x00, # '.'
0x10, 0x08, 0x04, 0x02, 0x01, # '/'
0x0e, 0x11, 0x15, 0x11, 0x0e, # '0'
0x00, 0x12, 0x1f, 0x10, 0x00, # '1'
0x00, 0x1d, 0x15, 0x15, 0x17, # '2'
0x00, 0x11, 0x15, 0x15, 0x0e, # '3'
0x00, 0x07, 0x04, 0x04, 0x1f, # '4'
0x00, 0x17, 0x15, 0x15, 0x09, # '5'
0x00, 0x1f, 0x15, 0x15, 0x1d, # '6'
0x00, 0x03, 0x19, 0x05, 0x03, # '7'
0x00, 0x0a, 0x15, 0x15, 0x0a, # '8'
0x00, 0x02, 0x15, 0x15, 0x0e, # '9'
0x00, 0x00, 0x12, 0x00, 0x00, # ':'
0x00, 0x08, 0x1a, 0x00, 0x00, # ';'
0x00, 0x04, 0x0a, 0x11, 0x00, # '<'
0x00, 0x0a, 0x0a, 0x0a, 0x0a, # '='
0x00, 0x11, 0x0a, 0x04, 0x00, # '>'
0x00, 0x01, 0x15, 0x05, 0x02, # '?'
0x0e, 0x11, 0x15, 0x05, 0x06, # '@'
0x00, 0x1f, 0x05, 0x05, 0x1f, # 'A'
0x00, 0x1f, 0x15, 0x15, 0x0e, # 'B'
0x00, 0x0e, 0x11, 0x11, 0x0a, # 'C'
0x00, 0x1f, 0x11, 0x11, 0x0e, # 'D'
0x00, 0x1f, 0x15, 0x15, 0x11, # 'E'
0x00, 0x1f, 0x05, 0x05, 0x01, # 'F'
0x00, 0x0e, 0x11, 0x15, 0x1d, # 'G'
0x00, 0x1f, 0x04, 0x04, 0x1f, # 'H'
0x00, 0x11, 0x1f, 0x11, 0x00, # 'I'
0x00, 0x18, 0x10, 0x10, 0x1f, # 'J'
0x00, 0x1f, 0x04, 0x0a, 0x11, # 'K'
0x00, 0x1f, 0x10, 0x10, 0x10, # 'L'
0x1f, 0x02, 0x0c, 0x02, 0x1f, # 'M'
0x00, 0x1f, 0x06, 0x0c, 0x1f, # 'N'
0x00, 0x0e, 0x11, 0x11, 0x0e, # 'O'
0x00, 0x1f, 0x05, 0x05, 0x02, # 'P'
0x00, 0x0e, 0x15, 0x19, 0x1e, # 'Q'
0x00, 0x1f, 0x05, 0x0d, 0x12, # 'R'
0x00, 0x12, 0x15, 0x15, 0x09, # 'S'
0x01, 0x01, 0x1f, 0x01, 0x01, # 'T'
0x00, 0x0f, 0x10, 0x10, 0x0f, # 'U'
0x03, 0x0c, 0x10, 0x0c, 0x03, # 'V'
0x0f, 0x10, 0x0c, 0x10, 0x0f, # 'W'
0x11, 0x0a, 0x04, 0x0a, 0x11, # 'X'
0x01, 0x02, 0x1c, 0x02, 0x01, # 'Y'
0x00, 0x19, 0x15, 0x13, 0x11, # 'Z'
0x00, 0x1f, 0x11, 0x11, 0x00, # '['
0x01, 0x02, 0x04, 0x08, 0x10, # '\'
0x00, 0x11, 0x11, 0x1f, 0x00, # ']'
0x00, 0x02, 0x01, 0x02, 0x00, # '^'
0x10, 0x10, 0x10, 0x10, 0x10, # '_'
0x00, 0x01, 0x02, 0x00, 0x00, # '`'
0x00, 0x08, 0x1a, 0x1a, 0x1c, # 'a'
0x00, 0x1f, 0x14, 0x14, 0x08, # 'b'
0x00, 0x0c, 0x12, 0x12, 0x12, # 'c'
0x00, 0x08, 0x14, 0x14, 0x1f, # 'd'
0x00, 0x0c, 0x16, 0x16, 0x14, # 'e'
0x00, 0x04, 0x1e, 0x05, 0x01, # 'f'
0x00, 0x0c, 0x12, 0x1a, 0x08, # 'g'
0x00, 0x1f, 0x04, 0x04, 0x18, # 'h'
0x00, 0x14, 0x14, 0x1d, 0x10, # 'i'
0x00, 0x18, 0x10, 0x10, 0x1d, # 'j'
0x00, 0x1f, 0x08, 0x0c, 0x10, # 'k'
0x00, 0x11, 0x1f, 0x10, 0x00, # 'l'
0x1e, 0x02, 0x1e, 0x02, 0x1c, # 'm'
0x00, 0x1e, 0x02, 0x02, 0x1c, # 'n'
0x00, 0x0c, 0x12, 0x12, 0x0c, # 'o'
0x00, 0x1e, 0x0a, 0x0a, 0x04, # 'p'
0x00, 0x04, 0x0a, 0x0a, 0x1e, # 'q'
0x00, 0x1c, 0x02, 0x02, 0x02, # 'r'
0x00, 0x14, 0x1e, 0x1a, 0x0a, # 's'
0x00, 0x04, 0x0f, 0x14, 0x10, # 't'
0x00, 0x0e, 0x10, 0x10, 0x1e, # 'u'
0x00, 0x06, 0x18, 0x18, 0x06, # 'v'
0x0e, 0x10, 0x0e, 0x10, 0x0e, # 'w'
0x00, 0x12, 0x0c, 0x0c, 0x12, # 'x'
0x00, 0x02, 0x14, 0x1c, 0x02, # 'y'
0x00, 0x12, 0x1a, 0x16, 0x12, # 'z'
0x00, 0x04, 0x1f, 0x11, 0x11, # '{'
0x00, 0x00, 0x1f, 0x00, 0x00, # '|'
0x00, 0x11, 0x11, 0x1f, 0x04, # '}'
0x00, 0x01, 0x03, 0x02, 0x02] # '~'

def render_char(s,c,col):
    offset=(ord(c)-32)*5
    w=0
    k=0
    c2=0
    for i in range(5):
        c2=font_data[offset+i]
        if (c2!=0 or c==' '):
            w=w+1
            mask=0x10
            for j in range(5):
                if (c2&mask)!=0:
                    if ((s+i)>=0 and (s+i)<44):
                        pixels[pix(4-j,s+k)]=col
                mask=mask>>1
            k=k+1
    return(w)

def render_string(start,string,color):
    i=0
    while(start<44 and i<len(string)):
        w=render_char(start,string[i],color)
        start=start+w+1
        i=i+1

def scroll_string(string,color,num):
    for i in range(num):
        p=43
        while(p>(-6*len(string))):
            for i in range(num_pixels):
                pixels[i]=(0,0,0)
            render_string(p,string,color)
            pixels.show()
            #time.sleep(0.01)
            p=p-1

def show_time(color):
    t=time.strftime("%I:%M")
    if t[0]=='0':
        t=t[1:]
    scroll_string(t,(255,0,0),3)

def wheel(pos):
    # Input a value 0 to 255 to get a color value.
    # The colours are a transition r - g - b - back to r.
    if pos < 0 or pos > 255:
        r = g = b = 0
    elif pos < 85:
        r = int(pos * 3)
        g = int(255 - pos*3)
        b = 0
    elif pos < 170:
        pos -= 85
        r = int(255 - pos*3)
        g = 0
        b = int(pos*3)
    else:
        pos -= 170
        r = 0
        g = int(pos*3)
        b = int(255 - pos*3)
    return (r, g, b) if ORDER == neopixel.RGB or ORDER == neopixel.GRB else (r, g, b, 0)


def rainbow_cycle(wait):
    for j in range(255):
        for i in range(num_pixels):
            pixel_index = (i * 256 // num_pixels) + j
            pixels[i] = wheel(pixel_index & 255)
        pixels.show()
        #time.sleep(wait)

def pixel_test():        
    for i in range(num_pixels):
        pixels[i]=(255,0,0)
        pixels.show()
        #time.sleep(0.1)

def blank():        
    for i in range(num_pixels):
        pixels[i]=(0,0,0)
    pixels.show()

def vertical_sweep():
    for i in range(500):
        s=i%20
        for i in range(num_pixels):
            pixels[i]=(0,0,0)
        for i in range(5):
            pixels[s*5+i]=(0,255,0)
        pixels.show()
        time.sleep(0.01)

def multi_color():
    temp=[0,0,0,0,0,0,0,0,0,0,0]
    for i in range(num_pixels):
        pixels[i]=(random.randint(0,255),random.randint(0,255),random.randint(0,255))
    for j in range(num_pixels*5):
        for i in range(11):
            temp[i]=pixels[pix(i,0)]
        for i in range(11):
            for k in range(43):
                pixels[pix(i,k)]=pixels[pix(i,k+1)]
        for i in range(11):
            pixels[pix(i,43)]=temp[i]
        pixels.show()
        time.sleep(0.05)
        
def multi_color2():
    blank()
    for i in range(500):
        for i in range(5):
            pixels[i]=(random.randint(0,255),random.randint(0,255),random.randint(0,255))
        for i in range(19):
            for j in range(5):
                pixels[5+(18-i)*5+j]=pixels[5+((18-i)-1)*5+j]
        pixels.show()
        time.sleep(0.5)

def pix(row,col):
    return(row*44+(row%2)*(43-col)+(1-row%2)*col)

def spin(delay,steps):
    temp=[0,0,0,0,0,0,0,0,0,0,0]
    for j in range(steps):
        for i in range(11):
            temp[i]=pixels[pix(i,0)]
        for i in range(11):
            for k in range(43):
                pixels[pix(i,k)]=pixels[pix(i,k+1)]
        for i in range(11):
            pixels[pix(i,43)]=temp[i]
        pixels.show()
        #time.sleep(delay)

def stripes(step,r,w):
    for row in range(rows):
        for col in range(cols):
            if ((col+row)%step==0):
                pixels[pix(row,col)]=r#colors[(col+row)%11]
            else:
                pixels[pix(row,col)]=w
    pixels.show()

def rect():
    blank()
    for i in range(20):
        pixels[pix(0,i)]=(255,0,0)
        pixels[pix(4,i)]=(255,0,0)
    for i in range(5):
        pixels[pix(i,0)]=(0,255,0)
        pixels[pix(i,19)]=(0,0,255)
    pixels.show()
    time.sleep(30)

def zigzag():
    f=True
    c=(255,0,0)
    for i in range(500):
        if (i%20)==0:
            c=(random.randint(0,255),random.randint(0,255),random.randint(0,255))
        if (i%5)==0:
            f=not f
        row=i%5
        if f:
            row=4-row
        pixels[pix(row,i%20)]=c
        pixels.show()
        time.sleep(0.1)

while True:
    blank()
    time.sleep(2)
    #pixel_test()
    stripes(4,(255,0,0),(0,0,0))
    spin(0.0,40)
    stripes(4,(0,0,255),(0,0,0))
    spin(0.0,40)
    stripes(4,(0,255,0),(0,0,0))
    spin(0.0,40)
    #pixel_test()
    #for i in range(10):
    #    rainbow_cycle(0.001)    # rainbow cycle with 1ms delay per step
    #multi_color()
    show_time((255,0,0))
    scroll_string("DO YOU LIKE THE CYLINDER LIGHT?",(0,255,0),3)
    #zigzag()        
    #rect()
    #vertical_sweep()
    #for i in range(10):
    #    rainbow_cycle(0.001)    # rainbow cycle with 1ms delay per step

